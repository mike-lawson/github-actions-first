name: Deploy to Staging
run-name: staging-deploy
on: [workflow_dispatch]
jobs:
  filter-branches:
    runs-on: ubuntu-latest
    steps:
      # grep . will exit if the awk fails
      # Ensures branch this workflow is ran on matches the release-v## or release-v##.# pattern
      - name: Check if release branch
        run: echo $GITHUB_REF | awk '/^refs\/heads\/release-v[0-9]+(\.[0-9]+)?$/' | grep .
  prepare-release-notes:
    needs: filter-branches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prepare release notes
        run: |
            git fetch origin $GITHUB_SHA
            git log --oneline origin/staging..$GITHUB_SHA
  qa-approval:
    environment: 'staging-qa'
    runs-on: ubuntu-latest
    needs: prepare-release-notes
    steps:
      - run: echo "QA approved"
  eng-approval:
    environment: 'staging-eng'
    runs-on: ubuntu-latest
    needs: prepare-release-notes
    steps:
      - run: echo "Engineering approved"
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [qa-approval, eng-approval]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Force push to staging
        run: |
          git config user.name "Github Action Bot"
          git config user.email "foo@bar.com"
          git fetch origin staging --depth=1
          git fetch origin $GITHUB_SHA
          git checkout staging
          git reset --hard $GITHUB_SHA
          git push -u origin staging --force
